
package Core;

import java.awt.CardLayout;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.*;
import javax.swing.JOptionPane;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.event.TableModelEvent;
import javax.swing.event.TableModelListener;
import javax.swing.table.TableModel;
import javax.swing.table.TableRowSorter;

/**
 *
 * @author hongnhung
 */
public class GUI extends javax.swing.JFrame {

    private CardLayout card;
    private Word flashWord;
    private Question flashQuestion;
    private Flashcard flashcard;
    private Quiz quiz;
    private Question questionOfQuiz;
    private Word wordOfQuiz;
    private int flashCount=1;
    private int quizCount=0;
    private String flashMode;
    private int noQuestionsOfQuiz;
    private WordsTable wordsTableModel;
    
    /**
     * Creates new form VocabularyAppGUI
     */
    public GUI() {
        initComponents();
        
        //add a list listener to the table of words in Saved Words Window, detect if any word in the list is selected
        wordsTable.getSelectionModel().addListSelectionListener(new ListSelectionListener(){
        @Override
        public void valueChanged(ListSelectionEvent event) {
            editWordButton.setEnabled(true);
            deleteWordButton.setEnabled(true);
            }
        });
        
        //add a listener to the model of table of words in Saved Words Window, detect if any data is changed
        wordsTable.getModel().addTableModelListener(new TableModelListener() {
            @Override
            public void tableChanged(TableModelEvent e) {
            updateTable();
            }
        }); 
    }
    
    //initiate Quiz window
    public void quizWindow(){
        card = (CardLayout)(mainPanel.getLayout());
        card.show(mainPanel, "card03");
        //construct the static variable of Quiz object in the GUI class
        Quiz quiz1 = new Quiz(noQuestionsOfQuiz, VocabularyApp.getDictionary());
        quiz = quiz1;
        //add all JButtons of the Viet Quiz Window to a JButton Group; to enable single-choice answer
        vietOptionsGroup.add(vietOptionA);
        vietOptionsGroup.add(vietOptionB);
        vietOptionsGroup.add(vietOptionC);
        vietOptionsGroup.add(vietOptionD);
        //add all JButtons of the Viet Quiz Window to a JButton Group
        engOptionsGroup.add(engOptionA);
        engOptionsGroup.add(engOptionB);
        engOptionsGroup.add(engOptionC);
        engOptionsGroup.add(engOptionD); 
        //get the first question of the quiz
        getWordOfQuiz();
        //disable Previous Question button in the first question of the quiz
        previousEngQuestionButton.setEnabled(false);
    }
    
    //initiate Saved Words Window
    public void allWordsWindow(){
        //switch card layout to Saved Words Window
        card = (CardLayout)(mainPanel.getLayout());
        card.show(mainPanel, "card05");
        //construct the static variable of TableModel object in the GUI class
        WordsTable wordsTableModel1 = new WordsTable(VocabularyApp.getDictionary());
        wordsTableModel = wordsTableModel1;
        //enable selection of only one word at a time
        wordsTable.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
    }
    
    //update table of saved words in Saved Words Window based on TableModel object
    public void updateTable(){ 
        //set JTable to TableModel object initiated when Saved Words Window is open
        wordsTable.setModel(wordsTableModel);
        wordsTable.setVisible(true);
    }
    
    //initiate Flashcard Window
    public void flashcardWindow(){
        //switch card layout to Flashcard window
        card = (CardLayout)(mainPanel.getLayout());
        card.show(mainPanel, "card02");
        //construct the static variable of Flashcard object in the GUI class
        Flashcard flashcard1 = new Flashcard(VocabularyApp.getDictionary());
        flashcard = flashcard1;
        //get a Word object and its corresponding Question object from a Question array genrated by Flashcard
        flashQuestion = flashcard.getFlashcardQuestionsArrayList().get(0);
        flashWord = flashQuestion.getWordQuestionWord();
        flashSideShow();
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        vietOptionsGroup = new javax.swing.ButtonGroup();
        engOptionsGroup = new javax.swing.ButtonGroup();
        mainPanel = new javax.swing.JPanel();
        menuWindow = new javax.swing.JPanel();
        addWordButton = new javax.swing.JButton();
        savedWordsButton = new javax.swing.JButton();
        flashcardButton = new javax.swing.JButton();
        quizButton = new javax.swing.JButton();
        exportWordsButton = new javax.swing.JButton();
        inputWordWindow = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        backToMenu = new javax.swing.JButton();
        englishMeaningText = new javax.swing.JTextField();
        findSuggestedMeaning = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        dictionaryMeaningText = new javax.swing.JTextArea();
        omitTranslation = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        vietMeaningText = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        contextText = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        notesText = new javax.swing.JTextField();
        submitWordButton = new javax.swing.JButton();
        flashcardWindow = new javax.swing.JPanel();
        backToMenu1 = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        englishMeaningCard = new javax.swing.JTextArea();
        jLabel7 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        vietMeaningCard = new javax.swing.JTextArea();
        modeChoiceCard = new javax.swing.JComboBox<>();
        jLabel8 = new javax.swing.JLabel();
        resetButton = new javax.swing.JButton();
        revealButton = new javax.swing.JButton();
        nextCardButton = new javax.swing.JButton();
        engQuizWindow = new javax.swing.JPanel();
        backToMenu2 = new javax.swing.JButton();
        jLabel9 = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        engQuestionWord = new javax.swing.JTextArea();
        jLabel10 = new javax.swing.JLabel();
        vietOptionA = new javax.swing.JRadioButton();
        vietOptionB = new javax.swing.JRadioButton();
        vietOptionC = new javax.swing.JRadioButton();
        vietOptionD = new javax.swing.JRadioButton();
        nextEngQuestionButton = new javax.swing.JButton();
        jLabel11 = new javax.swing.JLabel();
        modeChoiceQuiz = new javax.swing.JComboBox<>();
        previousEngQuestionButton = new javax.swing.JButton();
        vietQuizWindow = new javax.swing.JPanel();
        backToMenu3 = new javax.swing.JButton();
        jLabel12 = new javax.swing.JLabel();
        jScrollPane5 = new javax.swing.JScrollPane();
        vietQuestionWord = new javax.swing.JTextArea();
        jLabel13 = new javax.swing.JLabel();
        engOptionA = new javax.swing.JRadioButton();
        engOptionB = new javax.swing.JRadioButton();
        engOptionC = new javax.swing.JRadioButton();
        engOptionD = new javax.swing.JRadioButton();
        nextVietQuestionButton = new javax.swing.JButton();
        jLabel14 = new javax.swing.JLabel();
        modeChoiceQuiz1 = new javax.swing.JComboBox<>();
        previousVietQuestionButton = new javax.swing.JButton();
        savedWordsWindow = new javax.swing.JPanel();
        jScrollPane6 = new javax.swing.JScrollPane();
        wordsTable = new javax.swing.JTable();
        jLabel15 = new javax.swing.JLabel();
        engWordToSearch = new javax.swing.JTextField();
        backToMenu4 = new javax.swing.JButton();
        editWordButton = new javax.swing.JButton();
        deleteWordButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("frame");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        mainPanel.setPreferredSize(new java.awt.Dimension(590, 340));
        mainPanel.setLayout(new java.awt.CardLayout());

        menuWindow.setBackground(new java.awt.Color(238, 134, 121));
        menuWindow.setPreferredSize(new java.awt.Dimension(590, 340));

        addWordButton.setText("New word");
        addWordButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addWordButtonActionPerformed(evt);
            }
        });

        savedWordsButton.setText("Saved words");
        savedWordsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                savedWordsButtonActionPerformed(evt);
            }
        });

        flashcardButton.setText("Flashcards");
        flashcardButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                flashcardButtonActionPerformed(evt);
            }
        });

        quizButton.setText("Quiz");
        quizButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                quizButtonActionPerformed(evt);
            }
        });

        exportWordsButton.setText("Export words");
        exportWordsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exportWordsButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout menuWindowLayout = new javax.swing.GroupLayout(menuWindow);
        menuWindow.setLayout(menuWindowLayout);
        menuWindowLayout.setHorizontalGroup(
            menuWindowLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(menuWindowLayout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addComponent(addWordButton, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(savedWordsButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(flashcardButton, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(quizButton, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(exportWordsButton)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        menuWindowLayout.setVerticalGroup(
            menuWindowLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(menuWindowLayout.createSequentialGroup()
                .addGap(140, 140, 140)
                .addGroup(menuWindowLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addWordButton, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(savedWordsButton, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(flashcardButton, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(quizButton, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(exportWordsButton, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(146, Short.MAX_VALUE))
        );

        mainPanel.add(menuWindow, "card00");

        inputWordWindow.setBackground(new java.awt.Color(231, 166, 136));

        jLabel1.setText("English word:");

        backToMenu.setText("Back to menu");
        backToMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backToMenuActionPerformed(evt);
            }
        });

        findSuggestedMeaning.setText("Find in dictionary");
        findSuggestedMeaning.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                findSuggestedMeaningActionPerformed(evt);
            }
        });

        jLabel2.setText("Suggested meaning:");

        dictionaryMeaningText.setColumns(20);
        dictionaryMeaningText.setRows(5);
        jScrollPane1.setViewportView(dictionaryMeaningText);

        omitTranslation.setText("Omit");
        omitTranslation.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                omitTranslationActionPerformed(evt);
            }
        });

        jLabel3.setText("Your own definition:");

        jLabel4.setText("Word in context:");

        jLabel5.setText("Additional notes:");

        submitWordButton.setText("Submit");
        submitWordButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                submitWordButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout inputWordWindowLayout = new javax.swing.GroupLayout(inputWordWindow);
        inputWordWindow.setLayout(inputWordWindowLayout);
        inputWordWindowLayout.setHorizontalGroup(
            inputWordWindowLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, inputWordWindowLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(submitWordButton)
                .addGap(32, 32, 32))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, inputWordWindowLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(inputWordWindowLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(inputWordWindowLayout.createSequentialGroup()
                        .addGroup(inputWordWindowLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4)
                            .addComponent(jLabel5))
                        .addGap(27, 27, 27)
                        .addGroup(inputWordWindowLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(contextText)
                            .addComponent(notesText)))
                    .addGroup(inputWordWindowLayout.createSequentialGroup()
                        .addGroup(inputWordWindowLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3)
                            .addComponent(jLabel2)
                            .addComponent(jLabel1))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(inputWordWindowLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 311, Short.MAX_VALUE)
                            .addComponent(englishMeaningText)
                            .addComponent(vietMeaningText))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(inputWordWindowLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(omitTranslation)
                    .addComponent(findSuggestedMeaning))
                .addContainerGap())
            .addGroup(inputWordWindowLayout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addComponent(backToMenu)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        inputWordWindowLayout.setVerticalGroup(
            inputWordWindowLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(inputWordWindowLayout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addComponent(backToMenu)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(inputWordWindowLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(englishMeaningText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(findSuggestedMeaning))
                .addGap(12, 12, 12)
                .addGroup(inputWordWindowLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(inputWordWindowLayout.createSequentialGroup()
                        .addGap(38, 38, 38)
                        .addComponent(omitTranslation)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(inputWordWindowLayout.createSequentialGroup()
                        .addGroup(inputWordWindowLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(inputWordWindowLayout.createSequentialGroup()
                                .addGap(41, 41, 41)
                                .addComponent(jLabel2))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 23, Short.MAX_VALUE)
                        .addGroup(inputWordWindowLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(vietMeaningText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3))
                        .addGap(18, 18, 18)))
                .addGroup(inputWordWindowLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(inputWordWindowLayout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addGap(18, 18, 18)
                        .addGroup(inputWordWindowLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(notesText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel5))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(submitWordButton))
                    .addComponent(contextText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(14, 14, 14))
        );

        mainPanel.add(inputWordWindow, "card01");

        flashcardWindow.setBackground(new java.awt.Color(156, 207, 216));

        backToMenu1.setText("Back to menu");
        backToMenu1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backToMenu1ActionPerformed(evt);
            }
        });

        jLabel6.setText("English:");

        englishMeaningCard.setColumns(20);
        englishMeaningCard.setRows(5);
        jScrollPane2.setViewportView(englishMeaningCard);

        jLabel7.setText("Vietnamese:");

        vietMeaningCard.setColumns(20);
        vietMeaningCard.setRows(5);
        jScrollPane3.setViewportView(vietMeaningCard);

        modeChoiceCard.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Eng-Viet", "Viet-Eng" }));
        modeChoiceCard.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                modeChoiceCardActionPerformed(evt);
            }
        });

        jLabel8.setText("Select mode:");

        resetButton.setText("Reset");
        resetButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetButtonActionPerformed(evt);
            }
        });

        revealButton.setText("Reveal");
        revealButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                revealButtonActionPerformed(evt);
            }
        });

        nextCardButton.setText("Next card");
        nextCardButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nextCardButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout flashcardWindowLayout = new javax.swing.GroupLayout(flashcardWindow);
        flashcardWindow.setLayout(flashcardWindowLayout);
        flashcardWindowLayout.setHorizontalGroup(
            flashcardWindowLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(flashcardWindowLayout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addGroup(flashcardWindowLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel7)
                    .addComponent(backToMenu1)
                    .addGroup(flashcardWindowLayout.createSequentialGroup()
                        .addComponent(jLabel6)
                        .addGap(8, 8, 8)))
                .addGroup(flashcardWindowLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(flashcardWindowLayout.createSequentialGroup()
                        .addGap(41, 41, 41)
                        .addComponent(resetButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(revealButton))
                    .addGroup(flashcardWindowLayout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 259, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(63, 63, 63)
                        .addGroup(flashcardWindowLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel8)
                            .addGroup(flashcardWindowLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(nextCardButton)
                                .addComponent(modeChoiceCard, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(flashcardWindowLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 257, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        flashcardWindowLayout.setVerticalGroup(
            flashcardWindowLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(flashcardWindowLayout.createSequentialGroup()
                .addGroup(flashcardWindowLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(flashcardWindowLayout.createSequentialGroup()
                        .addGroup(flashcardWindowLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(flashcardWindowLayout.createSequentialGroup()
                                .addGap(54, 54, 54)
                                .addComponent(jLabel8)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(modeChoiceCard, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(flashcardWindowLayout.createSequentialGroup()
                                .addGap(14, 14, 14)
                                .addComponent(backToMenu1)
                                .addGap(56, 56, 56)
                                .addComponent(jLabel6)))
                        .addGap(96, 96, 96)
                        .addComponent(jLabel7))
                    .addGroup(flashcardWindowLayout.createSequentialGroup()
                        .addGap(54, 54, 54)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(30, 30, 30)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGroup(flashcardWindowLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(flashcardWindowLayout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(flashcardWindowLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(resetButton)
                            .addComponent(revealButton))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, flashcardWindowLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 28, Short.MAX_VALUE)
                        .addComponent(nextCardButton)
                        .addGap(23, 23, 23))))
        );

        mainPanel.add(flashcardWindow, "card02");

        engQuizWindow.setBackground(new java.awt.Color(227, 166, 157));

        backToMenu2.setText("Back to menu");
        backToMenu2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backToMenu2ActionPerformed(evt);
            }
        });

        jLabel9.setText("What is the Vietnamese definition of the following word:");

        engQuestionWord.setColumns(20);
        engQuestionWord.setRows(5);
        jScrollPane4.setViewportView(engQuestionWord);

        jLabel10.setText("?");

        vietOptionA.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        vietOptionA.setVerticalTextPosition(javax.swing.SwingConstants.TOP);
        vietOptionA.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                vietOptionAActionPerformed(evt);
            }
        });

        vietOptionB.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        vietOptionB.setVerticalTextPosition(javax.swing.SwingConstants.TOP);
        vietOptionB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                vietOptionBActionPerformed(evt);
            }
        });

        vietOptionC.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        vietOptionC.setVerticalTextPosition(javax.swing.SwingConstants.TOP);
        vietOptionC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                vietOptionCActionPerformed(evt);
            }
        });

        vietOptionD.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        vietOptionD.setVerticalTextPosition(javax.swing.SwingConstants.TOP);
        vietOptionD.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                vietOptionDActionPerformed(evt);
            }
        });

        nextEngQuestionButton.setText("Next question");
        nextEngQuestionButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nextEngQuestionButtonActionPerformed(evt);
            }
        });

        jLabel11.setText("Select mode:");

        modeChoiceQuiz.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Eng-Viet", "Viet-Eng" }));
        modeChoiceQuiz.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                modeChoiceQuizActionPerformed(evt);
            }
        });

        previousEngQuestionButton.setText("Previous question");
        previousEngQuestionButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                previousEngQuestionButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout engQuizWindowLayout = new javax.swing.GroupLayout(engQuizWindow);
        engQuizWindow.setLayout(engQuizWindowLayout);
        engQuizWindowLayout.setHorizontalGroup(
            engQuizWindowLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, engQuizWindowLayout.createSequentialGroup()
                .addGroup(engQuizWindowLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(engQuizWindowLayout.createSequentialGroup()
                        .addGap(15, 15, 15)
                        .addGroup(engQuizWindowLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(backToMenu2)
                            .addGroup(engQuizWindowLayout.createSequentialGroup()
                                .addGroup(engQuizWindowLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addGroup(engQuizWindowLayout.createSequentialGroup()
                                        .addGap(8, 8, 8)
                                        .addGroup(engQuizWindowLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(previousEngQuestionButton)
                                            .addGroup(engQuizWindowLayout.createSequentialGroup()
                                                .addGroup(engQuizWindowLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                                    .addComponent(vietOptionC)
                                                    .addComponent(vietOptionA))
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(vietOptionD))))
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, engQuizWindowLayout.createSequentialGroup()
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 121, Short.MAX_VALUE)
                                        .addGroup(engQuizWindowLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(vietOptionB)
                                            .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 209, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(engQuizWindowLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(engQuizWindowLayout.createSequentialGroup()
                                        .addGap(0, 0, Short.MAX_VALUE)
                                        .addComponent(modeChoiceQuiz, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(engQuizWindowLayout.createSequentialGroup()
                                        .addComponent(jLabel10)
                                        .addGap(0, 0, Short.MAX_VALUE))))))
                    .addGroup(engQuizWindowLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(nextEngQuestionButton))
                    .addGroup(engQuizWindowLayout.createSequentialGroup()
                        .addGap(65, 65, 65)
                        .addComponent(jLabel9)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 82, Short.MAX_VALUE)
                        .addComponent(jLabel11)))
                .addGap(42, 42, 42))
        );
        engQuizWindowLayout.setVerticalGroup(
            engQuizWindowLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(engQuizWindowLayout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addComponent(backToMenu2)
                .addGap(12, 12, 12)
                .addGroup(engQuizWindowLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(engQuizWindowLayout.createSequentialGroup()
                        .addComponent(jLabel11)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(modeChoiceQuiz, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(engQuizWindowLayout.createSequentialGroup()
                        .addComponent(jLabel9)
                        .addGroup(engQuizWindowLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(engQuizWindowLayout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(engQuizWindowLayout.createSequentialGroup()
                                .addGap(31, 31, 31)
                                .addComponent(jLabel10)))))
                .addGap(18, 18, 18)
                .addGroup(engQuizWindowLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(vietOptionB)
                    .addComponent(vietOptionA))
                .addGap(45, 45, 45)
                .addGroup(engQuizWindowLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(vietOptionC, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(vietOptionD, javax.swing.GroupLayout.Alignment.TRAILING))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 45, Short.MAX_VALUE)
                .addGroup(engQuizWindowLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(nextEngQuestionButton)
                    .addComponent(previousEngQuestionButton))
                .addGap(34, 34, 34))
        );

        mainPanel.add(engQuizWindow, "card03");

        vietQuizWindow.setBackground(new java.awt.Color(227, 166, 157));

        backToMenu3.setText("Back to menu");
        backToMenu3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backToMenu3ActionPerformed(evt);
            }
        });

        jLabel12.setText("Từ tiếng Anh của nghĩa tiếng Việt sau đây là gì:");

        vietQuestionWord.setColumns(20);
        vietQuestionWord.setRows(5);
        jScrollPane5.setViewportView(vietQuestionWord);

        jLabel13.setText("?");

        engOptionA.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        engOptionA.setVerticalTextPosition(javax.swing.SwingConstants.TOP);
        engOptionA.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                engOptionAActionPerformed(evt);
            }
        });

        engOptionB.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        engOptionB.setVerticalTextPosition(javax.swing.SwingConstants.TOP);
        engOptionB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                engOptionBActionPerformed(evt);
            }
        });

        engOptionC.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        engOptionC.setVerticalTextPosition(javax.swing.SwingConstants.TOP);
        engOptionC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                engOptionCActionPerformed(evt);
            }
        });

        engOptionD.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        engOptionD.setVerticalTextPosition(javax.swing.SwingConstants.TOP);
        engOptionD.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                engOptionDActionPerformed(evt);
            }
        });

        nextVietQuestionButton.setText("Next question");
        nextVietQuestionButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nextVietQuestionButtonActionPerformed(evt);
            }
        });

        jLabel14.setText("Select mode:");

        modeChoiceQuiz1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Eng-Viet", "Viet-Eng" }));
        modeChoiceQuiz1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                modeChoiceQuiz1ActionPerformed(evt);
            }
        });

        previousVietQuestionButton.setText("Previous question");
        previousVietQuestionButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                previousVietQuestionButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout vietQuizWindowLayout = new javax.swing.GroupLayout(vietQuizWindow);
        vietQuizWindow.setLayout(vietQuizWindowLayout);
        vietQuizWindowLayout.setHorizontalGroup(
            vietQuizWindowLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, vietQuizWindowLayout.createSequentialGroup()
                .addGroup(vietQuizWindowLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(vietQuizWindowLayout.createSequentialGroup()
                        .addGap(15, 15, 15)
                        .addGroup(vietQuizWindowLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(backToMenu3)
                            .addGroup(vietQuizWindowLayout.createSequentialGroup()
                                .addGroup(vietQuizWindowLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addGroup(vietQuizWindowLayout.createSequentialGroup()
                                        .addGap(8, 8, 8)
                                        .addGroup(vietQuizWindowLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(previousVietQuestionButton)
                                            .addGroup(vietQuizWindowLayout.createSequentialGroup()
                                                .addGroup(vietQuizWindowLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                                    .addComponent(engOptionC)
                                                    .addComponent(engOptionA))
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(engOptionD))))
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, vietQuizWindowLayout.createSequentialGroup()
                                        .addGap(121, 121, 121)
                                        .addGroup(vietQuizWindowLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(engOptionB)
                                            .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 209, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                .addGroup(vietQuizWindowLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(vietQuizWindowLayout.createSequentialGroup()
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jLabel13))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, vietQuizWindowLayout.createSequentialGroup()
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 110, Short.MAX_VALUE)
                                        .addComponent(modeChoiceQuiz1, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE))))))
                    .addGroup(vietQuizWindowLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(nextVietQuestionButton))
                    .addGroup(vietQuizWindowLayout.createSequentialGroup()
                        .addGap(83, 83, 83)
                        .addComponent(jLabel12)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel14)))
                .addGap(42, 42, 42))
        );
        vietQuizWindowLayout.setVerticalGroup(
            vietQuizWindowLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(vietQuizWindowLayout.createSequentialGroup()
                .addGroup(vietQuizWindowLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(vietQuizWindowLayout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(backToMenu3)
                        .addGap(61, 61, 61)
                        .addComponent(jLabel13))
                    .addGroup(vietQuizWindowLayout.createSequentialGroup()
                        .addGap(45, 45, 45)
                        .addGroup(vietQuizWindowLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel14)
                            .addComponent(jLabel12))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(vietQuizWindowLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(modeChoiceQuiz1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(18, 18, 18)
                .addGroup(vietQuizWindowLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(engOptionB)
                    .addComponent(engOptionA))
                .addGap(45, 45, 45)
                .addGroup(vietQuizWindowLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(engOptionC, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(engOptionD, javax.swing.GroupLayout.Alignment.TRAILING))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 45, Short.MAX_VALUE)
                .addGroup(vietQuizWindowLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(nextVietQuestionButton)
                    .addComponent(previousVietQuestionButton))
                .addGap(34, 34, 34))
        );

        mainPanel.add(vietQuizWindow, "card04");

        savedWordsWindow.setBackground(new java.awt.Color(225, 225, 187));

        wordsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "English", "From Dictionary", "Vietnamese", "Context", "Notes"
            }
        ));
        jScrollPane6.setViewportView(wordsTable);

        jLabel15.setText("Search word:");

        engWordToSearch.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                engWordToSearchKeyReleased(evt);
            }
        });

        backToMenu4.setText("Back to menu");
        backToMenu4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backToMenu4ActionPerformed(evt);
            }
        });

        editWordButton.setText("Edit word");
        editWordButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editWordButtonActionPerformed(evt);
            }
        });

        deleteWordButton.setText("Delete word");
        deleteWordButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteWordButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout savedWordsWindowLayout = new javax.swing.GroupLayout(savedWordsWindow);
        savedWordsWindow.setLayout(savedWordsWindowLayout);
        savedWordsWindowLayout.setHorizontalGroup(
            savedWordsWindowLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, savedWordsWindowLayout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addComponent(backToMenu4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel15)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(engWordToSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(22, 22, 22))
            .addGroup(savedWordsWindowLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane6, javax.swing.GroupLayout.DEFAULT_SIZE, 578, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, savedWordsWindowLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(deleteWordButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(editWordButton)
                .addGap(18, 18, 18))
        );
        savedWordsWindowLayout.setVerticalGroup(
            savedWordsWindowLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, savedWordsWindowLayout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addGroup(savedWordsWindowLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel15)
                    .addComponent(engWordToSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(backToMenu4))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 214, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 34, Short.MAX_VALUE)
                .addGroup(savedWordsWindowLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(editWordButton)
                    .addComponent(deleteWordButton))
                .addGap(16, 16, 16))
        );

        mainPanel.add(savedWordsWindow, "card05");

        getContentPane().add(mainPanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        getAccessibleContext().setAccessibleParent(this);

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    
    private void addWordButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addWordButtonActionPerformed
        // initiate Add New Word window
        card = (CardLayout)(mainPanel.getLayout());
        card.show(mainPanel, "card01");
    }//GEN-LAST:event_addWordButtonActionPerformed

    private void findSuggestedMeaningActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_findSuggestedMeaningActionPerformed
        // get suggested dictionary meaning of an entered English word by API
        String liveWord = englishMeaningText.getText();
        try {
            String liveMeaning = Word.getWordData(liveWord);
            dictionaryMeaningText.setText(liveMeaning);
        } catch (IOException ex) {
            Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_findSuggestedMeaningActionPerformed

    private void backToMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backToMenuActionPerformed
        // TODO add your handling code here:
        backToMenu();
    }//GEN-LAST:event_backToMenuActionPerformed

    private void backToMenu1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backToMenu1ActionPerformed
        // TODO add your handling code here:
        backToMenu();
    }//GEN-LAST:event_backToMenu1ActionPerformed

    private void backToMenu2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backToMenu2ActionPerformed
        // TODO add your handling code here:
        backToMenu();
    }//GEN-LAST:event_backToMenu2ActionPerformed

    private void vietOptionBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_vietOptionBActionPerformed
        // TODO add your handling code here:
        vietOptionsGroup.getSelection().setActionCommand(vietOptionB.getText());
    }//GEN-LAST:event_vietOptionBActionPerformed

    private void vietOptionDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_vietOptionDActionPerformed
        // TODO add your handling code here:
        vietOptionsGroup.getSelection().setActionCommand(vietOptionD.getText());
    }//GEN-LAST:event_vietOptionDActionPerformed

    private void vietOptionAActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_vietOptionAActionPerformed
        // TODO add your handling code here:
        vietOptionsGroup.getSelection().setActionCommand(vietOptionA.getText());      
    }//GEN-LAST:event_vietOptionAActionPerformed

    private void exportWordsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exportWordsButtonActionPerformed
        try {
            //Export the saved dictionary
            ExportDictionary.writeToExternal();
        } catch (IOException ex) {
            Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_exportWordsButtonActionPerformed

    private void quizButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_quizButtonActionPerformed
        // TODO add your handling code here:
        int noOfWords = VocabularyApp.getDictionary().getDictionaryKeepByEngKey().size();
        if(noOfWords<=3){
            JOptionPane.showMessageDialog(menuWindow, "There are " + noOfWords + " saved items in your dictionary" + "\n" + "There needs to be more than 3 words to create quiz");
            backToMenu();
        } else {
        String quizDialog = JOptionPane.showInputDialog(menuWindow, "There are " + noOfWords + " saved items in your dictionary" + "\n" + "Choose the number of words to be tested in this quiz");
        if (quizDialog !=null){
            if(quizDialog.isEmpty()){
                JOptionPane.showMessageDialog(menuWindow, "Please enter a number");
                quizDialog = JOptionPane.showInputDialog(menuWindow, "There are " + noOfWords + " saved items in your dictionary" + "\n" + "Choose the number of words to be tested in this quiz");
                int quizNoOfQuestions = Integer.parseInt(quizDialog);
                noQuestionsOfQuiz = quizNoOfQuestions;           
                quizWindow();
                quizEngShow();
            } else {
                int quizNoOfQuestions = Integer.parseInt(quizDialog);
                noQuestionsOfQuiz = quizNoOfQuestions;
                quizWindow();
                quizEngShow();
                }
            }
        }
    }//GEN-LAST:event_quizButtonActionPerformed
    
    private void modeChoiceCardActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_modeChoiceCardActionPerformed
        // TODO add your handling code here:
        String flashModeSelected =String.valueOf(modeChoiceCard.getSelectedItem()) ;        
        if (flashModeSelected.equals("Eng-Viet")){            
            engModeFlash();   
        } else if (flashModeSelected.equals("Viet-Eng")){           
            vietModeFlash();
        }   
    }//GEN-LAST:event_modeChoiceCardActionPerformed
    
    private void backToMenu3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backToMenu3ActionPerformed
    //switch back to menu window
        backToMenu();
    }//GEN-LAST:event_backToMenu3ActionPerformed

    private void engOptionAActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_engOptionAActionPerformed
        //store text answer from the chosen option A
        engOptionsGroup.getSelection().setActionCommand(engOptionA.getText());
    }//GEN-LAST:event_engOptionAActionPerformed

    private void engOptionBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_engOptionBActionPerformed
        //store text answer from a chosen option B
        engOptionsGroup.getSelection().setActionCommand(engOptionB.getText());
    }//GEN-LAST:event_engOptionBActionPerformed

    private void engOptionDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_engOptionDActionPerformed
        // store text answer from a chosen option D
        engOptionsGroup.getSelection().setActionCommand(engOptionD.getText());
    }//GEN-LAST:event_engOptionDActionPerformed

    private void nextVietQuestionButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nextVietQuestionButtonActionPerformed
        // TODO add your handling code here:
        if(quizCount<noQuestionsOfQuiz){
            quizCount++; 
            quizClearFields();
            getWordOfQuiz();
            quizVietShow();
            previousVietQuestionButton.setEnabled(true);
            
            
            if (quizCount==noQuestionsOfQuiz-1){
            System.out.println("Last question");
            nextVietQuestionButton.setText("End quiz");
            previousVietQuestionButton.setEnabled(true);
            quizCount++;
            }
            
            if (engOptionsGroup.getSelection()!=null){
                quiz.allSelectedOptions(engOptionsGroup.getSelection().getActionCommand());}
            else {
                quiz.allSelectedOptions("");  
            }
            engOptionsGroup.clearSelection();
           
        }
        else if (quizCount==noQuestionsOfQuiz){
            if (engOptionsGroup.getSelection()!=null){
                quiz.allSelectedOptions(engOptionsGroup.getSelection().getActionCommand());}
            else {
                quiz.allSelectedOptions("");  
            }
            engOptionsGroup.clearSelection();
            quiz.calculateScoreVietMode();
            
            JOptionPane.showMessageDialog(vietQuizWindow, "Your score is "+quiz.getScoreVietMode()+"/"+noQuestionsOfQuiz*10);
            backToMenu();
            quizCount=0;
            nextVietQuestionButton.setText("Next question");
        } 
    }//GEN-LAST:event_nextVietQuestionButtonActionPerformed

    private void modeChoiceQuiz1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_modeChoiceQuiz1ActionPerformed
        // TODO add your handling code here:
        String selectedMode = (String) modeChoiceQuiz1.getSelectedItem();
        if (selectedMode.equals("Eng-Viet")){
            card = (CardLayout)(mainPanel.getLayout());
            card.show(mainPanel, "card03");
            modeChoiceQuiz.setSelectedIndex(0);
            quizCount=0;
            quizClearFields();
            getWordOfQuiz();
            quizEngShow();
        }
    }//GEN-LAST:event_modeChoiceQuiz1ActionPerformed

    private void modeChoiceQuizActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_modeChoiceQuizActionPerformed
        // TODO add your handling code here:
        String selectedMode = (String) modeChoiceQuiz.getSelectedItem();
        if (selectedMode.equals("Viet-Eng")){
            card = (CardLayout)(mainPanel.getLayout());
            card.show(mainPanel, "card04");
            modeChoiceQuiz1.setSelectedIndex(1);
            quizCount=0;
            quizClearFields();
            getWordOfQuiz();
            quizVietShow();
        }
    }//GEN-LAST:event_modeChoiceQuizActionPerformed

    private void omitTranslationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_omitTranslationActionPerformed
        // TODO add your handling code here:
        dictionaryMeaningText.setText("");
    }//GEN-LAST:event_omitTranslationActionPerformed

    private void submitWordButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_submitWordButtonActionPerformed
        // TODO add your handling code here:
        String englishMeaning = englishMeaningText.getText();
        String dictionaryMeaning = dictionaryMeaningText.getText();
        String vietMeaning = vietMeaningText.getText();
        String context = contextText.getText();
        String notes = notesText.getText();
        Word.addWordToDict(englishMeaning, dictionaryMeaning, vietMeaning, context, notes);
        System.out.println(VocabularyApp.getDictionary().getDictionaryKeepByEngKey().size());
        englishMeaningText.setText("");
        dictionaryMeaningText.setText("");
        vietMeaningText.setText("");
        contextText.setText("");
        notesText.setText("");        
    }//GEN-LAST:event_submitWordButtonActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        // TODO add your handling code here:
        System.out.println("Closed");
        FileKeep.writeKeep();
    }//GEN-LAST:event_formWindowClosing

    private void flashcardButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_flashcardButtonActionPerformed
        // TODO add your handling code here:
        int noOfWords = VocabularyApp.getDictionary().getDictionaryKeepByEngKey().size();
        if(noOfWords<=3){
            JOptionPane.showMessageDialog(menuWindow, "There are " + noOfWords + " saved items in your dictionary" + "\n" + "There needs to be more than 3 words to create flashcards");
            backToMenu();
        } else {
        flashcardWindow();
        }
    }//GEN-LAST:event_flashcardButtonActionPerformed

    private void revealButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_revealButtonActionPerformed
        // TODO add your handling code here:]
        flashReveal();
    }//GEN-LAST:event_revealButtonActionPerformed

    private void nextCardButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nextCardButtonActionPerformed
        // TODO add your handling code here:
        int noOfWords = VocabularyApp.getDictionary().getDictionaryKeepByEngKey().size();
        if(flashCount<noOfWords){
            nextFlashWord();
            flashSideShow();
        }
        else if (flashCount==noOfWords){
            flashCount=0;
            nextFlashWord();
            flashSideShow();
        }
        flashCount++;        
    }//GEN-LAST:event_nextCardButtonActionPerformed

    private void resetButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resetButtonActionPerformed
        // TODO add your handling code here:
        flashcardWindow();
    }//GEN-LAST:event_resetButtonActionPerformed
   
    private void nextEngQuestionButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nextEngQuestionButtonActionPerformed
        // TODO add your handling code here:
        if(quizCount<noQuestionsOfQuiz){
            quizCount++; 
            quizClearFields();
            getWordOfQuiz();
            quizEngShow();
            previousEngQuestionButton.setEnabled(true);
            
            if (quizCount==noQuestionsOfQuiz-1){
            System.out.println("Last question");
            nextEngQuestionButton.setText("End quiz");
            previousEngQuestionButton.setEnabled(true);
            quizCount++;
            }
            
            if (vietOptionsGroup.getSelection()!=null){
                quiz.allSelectedOptions(vietOptionsGroup.getSelection().getActionCommand());}
            else {
                quiz.allSelectedOptions("");  
            }
            vietOptionsGroup.clearSelection();
           
        }
        else if (quizCount==noQuestionsOfQuiz){
            if (vietOptionsGroup.getSelection()!=null){
                quiz.allSelectedOptions(vietOptionsGroup.getSelection().getActionCommand());}
            else {
                quiz.allSelectedOptions("");  
            }
            vietOptionsGroup.clearSelection();
            quiz.calculateScoreEngMode();
            
            JOptionPane.showMessageDialog(engQuizWindow, "Your score is "+quiz.getScoreEngMode()+"/"+noQuestionsOfQuiz*10);
            backToMenu();
            quizCount=0;
            nextEngQuestionButton.setText("Next question");
        } 
        
    }//GEN-LAST:event_nextEngQuestionButtonActionPerformed

    private void previousEngQuestionButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_previousEngQuestionButtonActionPerformed
        // TODO add your handling code here:
        if(quizCount>0){
            quizCount--;
            quizClearFields();
            getWordOfQuiz();
            quizEngShow(); 
            
            if (quizCount==noQuestionsOfQuiz-1){
            quizCount--;
            quizClearFields();
            getWordOfQuiz();
            quizEngShow();
            nextEngQuestionButton.setText("Next Question");
            }  
        }
        if (quizCount==0){
                previousEngQuestionButton.setEnabled(false);
            }
    }//GEN-LAST:event_previousEngQuestionButtonActionPerformed

    private void vietOptionCActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_vietOptionCActionPerformed
        // TODO add your handling code here:
        vietOptionsGroup.getSelection().setActionCommand(vietOptionC.getText());
    }//GEN-LAST:event_vietOptionCActionPerformed

    private void previousVietQuestionButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_previousVietQuestionButtonActionPerformed
        // TODO add your handling code here:
        if(quizCount>0){
            quizCount--;
            quizClearFields();
            getWordOfQuiz();
            quizVietShow(); 
            
            if (quizCount==noQuestionsOfQuiz-1){
            quizCount--;
            quizClearFields();
            getWordOfQuiz();
            quizVietShow();
            nextVietQuestionButton.setText("Next Question");
            }  
        }
        if (quizCount==0){
                previousVietQuestionButton.setEnabled(false);
            }
    }//GEN-LAST:event_previousVietQuestionButtonActionPerformed

    private void engOptionCActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_engOptionCActionPerformed
        // TODO add your handling code here:
        engOptionsGroup.getSelection().setActionCommand(engOptionC.getText());
    }//GEN-LAST:event_engOptionCActionPerformed

    private void savedWordsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_savedWordsButtonActionPerformed
        // TODO add your handling code here:
        int noOfWords = VocabularyApp.getDictionary().getDictionaryKeepByEngKey().size();
        if(noOfWords<=3){
            JOptionPane.showMessageDialog(menuWindow, "There are " + noOfWords + " saved items in your dictionary" + "\n" + "There needs to be more than 3 words to display list of saved words");
            backToMenu();
        } else {
            allWordsWindow();
            updateTable();
            editWordButton.setEnabled(false);
            deleteWordButton.setEnabled(false);
        }
    }//GEN-LAST:event_savedWordsButtonActionPerformed

    private void backToMenu4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backToMenu4ActionPerformed
        // TODO add your handling code here:
        backToMenu();
    }//GEN-LAST:event_backToMenu4ActionPerformed

    private void editWordButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editWordButtonActionPerformed
        // edit properties of a selected word
        int selectedRowIndex = wordsTable.getSelectedRow();
        String engMeaning = wordsTableModel.getValueAt(selectedRowIndex, 0).toString();
        
        //create new text fields to enter edited properties
        JTextField newDictionary = new JTextField();
        JTextField newViet = new JTextField();
        JTextField newContext = new JTextField();
        JTextField newNotes = new JTextField();
        //create components for pop-up edit word window
        final JComponent[] inputs = new JComponent[] {
            new JLabel("English word: "+ engMeaning),
            new JLabel("Dictionary meaning"),
            newDictionary,
            new JLabel("Vietnamese meaning"),
            newViet,
            new JLabel("Context"),
            newContext,
            new JLabel("Notes"),
            newNotes,
        };
        //set values of new text fields in edit word window to current values of unedited word
        newDictionary.setText(wordsTable.getValueAt(selectedRowIndex, 1).toString());
        newViet.setText(wordsTable.getValueAt(selectedRowIndex, 2).toString());
        newContext.setText(wordsTable.getValueAt(selectedRowIndex, 3).toString());
        newNotes.setText(wordsTable.getValueAt(selectedRowIndex, 4).toString());
        
        //update properties of the selected word based on new inputs
        JOptionPane.showConfirmDialog(savedWordsWindow, inputs, "Edit selected word", JOptionPane.OK_CANCEL_OPTION);   
            //update values of the edited word in TableModel
            wordsTableModel.setValueAt(newDictionary.getText(), selectedRowIndex, 1);
            wordsTableModel.setValueAt(newViet.getText(), selectedRowIndex, 2);
            wordsTableModel.setValueAt(newContext.getText(), selectedRowIndex, 3);
            wordsTableModel.setValueAt(newNotes.getText(), selectedRowIndex, 4);
            wordsTableModel.fireTableDataChanged();
            //update values of the edited word in HashMap collection of all saved words
            Word editedWord = new Word (engMeaning, newDictionary.getText(), newViet.getText(), newContext.getText(), newNotes.getText());
            VocabularyApp.getDictionary().getDictionaryKeepByEngKey().replace(engMeaning, editedWord);
    }//GEN-LAST:event_editWordButtonActionPerformed

    private void deleteWordButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteWordButtonActionPerformed
        // delete a selected word from list of all saved words
        int selectedRowIndex1 = wordsTable.getSelectedRow();
        String engMeaning = wordsTable.getValueAt(selectedRowIndex1, 0).toString();
        //remove selected word from HashMap collection of all saved words
        VocabularyApp.getDictionary().getDictionaryKeepByEngKey().remove(engMeaning);
        //update table of saved words by updating Table Model
        wordsTableModel.fireTableDataChanged();
        updateTable(); 
    }//GEN-LAST:event_deleteWordButtonActionPerformed

    private void engWordToSearchKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_engWordToSearchKeyReleased
        // search intaneously in the table for each key typed into the search field using a row sorter
        System.out.println(engWordToSearch.getText());
        TableRowSorter<TableModel> rowSorter = new TableRowSorter<>(wordsTableModel);
        wordsTable.setRowSorter(rowSorter);
        String text = engWordToSearch.getText();
        if (text.trim().length() == 0) {
            rowSorter.setRowFilter(null);
            } else {
            rowSorter.setRowFilter(RowFilter.regexFilter("(?i)" + text));
            }
    }//GEN-LAST:event_engWordToSearchKeyReleased
    
    //switch card layout back to main Menu
    private void backToMenu(){
        card = (CardLayout)(mainPanel.getLayout());
        card.show(mainPanel, "card00");
    }
    
    //clear all fields of a question in the Quiz window
    private void quizClearFields(){
        engQuestionWord.setText("");
        vietOptionA.setText("");
        vietOptionB.setText("");
        vietOptionC.setText("");
        vietOptionD.setText("");
        vietQuestionWord.setText("");
        engOptionA.setText("");
        engOptionB.setText("");
        engOptionC.setText("");
        engOptionD.setText("");
    }
    
    // get a Word object and its corresponding Question object from a Question array generated by Quiz
    private void getWordOfQuiz(){
        questionOfQuiz = quiz.getQuizQuestionsArrayList().get(quizCount);
        wordOfQuiz = questionOfQuiz.getWordQuestionWord();
    }
    
    //set questions of the quiz in English and options to choose from are Vietnamese
    public void quizEngShow(){
        engQuestionWord.setText(wordOfQuiz.getEnglishMeaning());
        vietOptionA.setText(questionOfQuiz.getVietOptionA());
        vietOptionB.setText(questionOfQuiz.getVietOptionB());
        vietOptionC.setText(questionOfQuiz.getVietOptionC());
        vietOptionD.setText(questionOfQuiz.getVietOptionD());
    }
    
    //set questions of the quiz in Vietnamese and options to choose from are English
    public void quizVietShow(){
        vietQuestionWord.setText(wordOfQuiz.getFullVietMeaning());
        engOptionA.setText(questionOfQuiz.getEngOptionA());
        engOptionB.setText(questionOfQuiz.getEngOptionB());
        engOptionC.setText(questionOfQuiz.getEngOptionC());
        engOptionD.setText(questionOfQuiz.getEngOptionD());
    }
    
    //next flashcard
    private void nextFlashWord(){
        flashClearFields();
        //get Word object from Question array created when Flashcard object is initiated
        flashWord = flashcard.getFlashcardQuestionsArrayList().get(flashCount).getWordQuestionWord();
    }
    
    private void engModeFlash(){
        //show English meaning as the first side of the flashcard, hide Vietnamese meaning
        englishMeaningCard.setText(flashWord.getEnglishMeaning());
        vietMeaningCard.setText("");
    }
    
    private void vietModeFlash(){
        //show Vietnamese meaning as the first side of the flashcard, hide ENglish meaning
        vietMeaningCard.setText(flashWord.getFullVietMeaning());
        englishMeaningCard.setText("");
    }
    
    public void flashSideShow(){
        //show the first side of the flashcard, based on the current language mode of Eng-Viet or Viet-Eng
        flashMode = String.valueOf(modeChoiceCard.getSelectedItem());
        if (flashMode.equals("Eng-Viet")){
        engModeFlash();
        }
        else if (flashMode.equals("Viet-Eng")){
        vietModeFlash();
        }
    }
    
    //clear all text fields of the flashcard
    public void flashClearFields(){
        englishMeaningCard.setText("");
        vietMeaningCard.setText("");
    }
    
    public void flashReveal(){
        //reveal the hidden side of flashcard, based on the current language mode of Eng-Viet or Viet-Eng
        flashMode = String.valueOf(modeChoiceCard.getSelectedItem());
        if (flashMode.equals("Eng-Viet")){
            vietMeaningCard.setText(flashWord.getFullVietMeaning());
        }
        else if (flashMode.equals("Viet-Eng")){
            englishMeaningCard.setText(flashWord.getEnglishMeaning());
        }
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GUI().setVisible(true);
                VocabularyApp.start();
                
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addWordButton;
    private javax.swing.JButton backToMenu;
    private javax.swing.JButton backToMenu1;
    private javax.swing.JButton backToMenu2;
    private javax.swing.JButton backToMenu3;
    private javax.swing.JButton backToMenu4;
    private javax.swing.JTextField contextText;
    private javax.swing.JButton deleteWordButton;
    private javax.swing.JTextArea dictionaryMeaningText;
    private javax.swing.JButton editWordButton;
    private javax.swing.JRadioButton engOptionA;
    private javax.swing.JRadioButton engOptionB;
    private javax.swing.JRadioButton engOptionC;
    private javax.swing.JRadioButton engOptionD;
    private javax.swing.ButtonGroup engOptionsGroup;
    private javax.swing.JTextArea engQuestionWord;
    private javax.swing.JPanel engQuizWindow;
    private javax.swing.JTextField engWordToSearch;
    private javax.swing.JTextArea englishMeaningCard;
    private javax.swing.JTextField englishMeaningText;
    private javax.swing.JButton exportWordsButton;
    private javax.swing.JButton findSuggestedMeaning;
    private javax.swing.JButton flashcardButton;
    private javax.swing.JPanel flashcardWindow;
    private javax.swing.JPanel inputWordWindow;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JPanel menuWindow;
    private javax.swing.JComboBox<String> modeChoiceCard;
    private javax.swing.JComboBox<String> modeChoiceQuiz;
    private javax.swing.JComboBox<String> modeChoiceQuiz1;
    private javax.swing.JButton nextCardButton;
    private javax.swing.JButton nextEngQuestionButton;
    private javax.swing.JButton nextVietQuestionButton;
    private javax.swing.JTextField notesText;
    private javax.swing.JButton omitTranslation;
    private javax.swing.JButton previousEngQuestionButton;
    private javax.swing.JButton previousVietQuestionButton;
    private javax.swing.JButton quizButton;
    private javax.swing.JButton resetButton;
    private javax.swing.JButton revealButton;
    private javax.swing.JButton savedWordsButton;
    private javax.swing.JPanel savedWordsWindow;
    private javax.swing.JButton submitWordButton;
    private javax.swing.JTextArea vietMeaningCard;
    private javax.swing.JTextField vietMeaningText;
    private javax.swing.JRadioButton vietOptionA;
    private javax.swing.JRadioButton vietOptionB;
    private javax.swing.JRadioButton vietOptionC;
    private javax.swing.JRadioButton vietOptionD;
    private javax.swing.ButtonGroup vietOptionsGroup;
    private javax.swing.JTextArea vietQuestionWord;
    private javax.swing.JPanel vietQuizWindow;
    private javax.swing.JTable wordsTable;
    // End of variables declaration//GEN-END:variables

}
